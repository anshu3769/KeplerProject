{"ast":null,"code":"var _jsxFileName = \"/home/anshu/sandbox/KeplerProject/Frontend/typefast/src/index.js\";\nimport React from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloProvider } from 'react-apollo';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloLink } from 'apollo-link';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nvar client = new ApolloClient({\n  link: ApolloLink.from([onError(function (_ref) {\n    var graphQLErrors = _ref.graphQLErrors,\n        networkError = _ref.networkError;\n\n    if (graphQLErrors) {\n      graphQLErrors.map(function (_ref2) {\n        var message = _ref2.message,\n            locations = _ref2.locations,\n            path = _ref2.path;\n        console.error(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n      });\n    }\n\n    if (networkError) {\n      console.error(\"[Network error]: \".concat(networkError));\n    }\n  }), new HttpLink({\n    uri: 'http://127.0.0.1:5000/graphql'\n  })]),\n  cache: new InMemoryCache({\n    addTypename: true\n  })\n}); // const httpLink = createHttpLink({\n//   uri: \"http://127.0.0.1:5000/graphql\"\n// })\n// const client = new ApolloClient({\n//      link: httpLink,\n//      cache: new InMemoryCache()\n// });\n//const store = configureStore(initialState, client);\n\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/anshu/sandbox/KeplerProject/Frontend/typefast/src/index.js"],"names":["React","ApolloClient","ApolloProvider","HttpLink","ApolloLink","onError","InMemoryCache","ReactDOM","App","serviceWorker","client","link","from","graphQLErrors","networkError","map","message","locations","path","console","error","uri","cache","addTypename","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAAUC,cAAV,QAAgC,cAAhC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,oBAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,IAAMC,MAAM,GAAG,IAAIT,YAAJ,CAAiB;AAC/BU,EAAAA,IAAI,EAAEP,UAAU,CAACQ,IAAX,CAAgB,CACpBP,OAAO,CAAC,gBAAqC;AAAA,QAAlCQ,aAAkC,QAAlCA,aAAkC;AAAA,QAAnBC,YAAmB,QAAnBA,YAAmB;;AAC3C,QAAID,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACE,GAAd,CAAkB,iBAAkC;AAAA,YAA/BC,OAA+B,SAA/BA,OAA+B;AAAA,YAAtBC,SAAsB,SAAtBA,SAAsB;AAAA,YAAXC,IAAW,SAAXA,IAAW;AAClDC,QAAAA,OAAO,CAACC,KAAR,qCAC+BJ,OAD/B,yBACqDC,SADrD,qBACyEC,IADzE;AAGD,OAJD;AAKD;;AACD,QAAIJ,YAAJ,EAAkB;AAChBK,MAAAA,OAAO,CAACC,KAAR,4BAAkCN,YAAlC;AACD;AACF,GAXM,CADa,EAapB,IAAIX,QAAJ,CAAa;AACXkB,IAAAA,GAAG,EAAE;AADM,GAAb,CAboB,CAAhB,CADyB;AAkB/BC,EAAAA,KAAK,EAAE,IAAIhB,aAAJ,CAAkB;AAAEiB,IAAAA,WAAW,EAAE;AAAf,GAAlB;AAlBwB,CAAjB,CAAf,C,CAsBA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;;AAEAhB,QAAQ,CAACiB,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEd,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAGqBe,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHrB,E,CAKA;AACA;AACA;;AACAjB,aAAa,CAACkB,UAAd","sourcesContent":["import React from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport  { ApolloProvider } from 'react-apollo';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloLink } from 'apollo-link';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n link: ApolloLink.from([\n   onError(({ graphQLErrors, networkError }) => {\n     if (graphQLErrors) {\n       graphQLErrors.map(({ message, locations, path }) => {\n         console.error(\n           `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n         )\n       })\n     }\n     if (networkError) {\n       console.error(`[Network error]: ${networkError}`)\n     }\n   }),\n   new HttpLink({\n     uri: 'http://127.0.0.1:5000/graphql',\n   }),\n ]),\n cache: new InMemoryCache({ addTypename: true }),\n})\n\n\n// const httpLink = createHttpLink({\n//   uri: \"http://127.0.0.1:5000/graphql\"\n// })\n\n\n// const client = new ApolloClient({\n//      link: httpLink,\n//      cache: new InMemoryCache()\n// });\n\n//const store = configureStore(initialState, client);\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App/>\n  </ApolloProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}