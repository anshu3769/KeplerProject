{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar apollo_link_1 = require(\"apollo-link\");\n\nvar printer_1 = require(\"graphql/language/printer\");\n\nvar apollo_utilities_1 = require(\"apollo-utilities\");\n\nvar isEqual = require('lodash.isequal');\n\nvar MockLink = function (_super) {\n  tslib_1.__extends(MockLink, _super);\n\n  function MockLink(mockedResponses, addTypename) {\n    if (addTypename === void 0) {\n      addTypename = true;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.addTypename = true;\n    _this.mockedResponsesByKey = {};\n    _this.addTypename = addTypename;\n    if (mockedResponses) mockedResponses.forEach(function (mockedResponse) {\n      _this.addMockedResponse(mockedResponse);\n    });\n    return _this;\n  }\n\n  MockLink.prototype.addMockedResponse = function (mockedResponse) {\n    var key = requestToKey(mockedResponse.request, this.addTypename);\n    var mockedResponses = this.mockedResponsesByKey[key];\n\n    if (!mockedResponses) {\n      mockedResponses = [];\n      this.mockedResponsesByKey[key] = mockedResponses;\n    }\n\n    mockedResponses.push(mockedResponse);\n  };\n\n  MockLink.prototype.request = function (operation) {\n    var key = requestToKey(operation, this.addTypename);\n    var responseIndex;\n    var response = (this.mockedResponsesByKey[key] || []).find(function (res, index) {\n      var requestVariables = operation.variables || {};\n      var mockedResponseVariables = res.request.variables || {};\n\n      if (!isEqual(requestVariables, mockedResponseVariables)) {\n        return false;\n      }\n\n      responseIndex = index;\n      return true;\n    });\n\n    if (!response || typeof responseIndex === 'undefined') {\n      throw new Error(\"No more mocked responses for the query: \" + printer_1.print(operation.query) + \", variables: \" + JSON.stringify(operation.variables));\n    }\n\n    this.mockedResponsesByKey[key].splice(responseIndex, 1);\n    var result = response.result,\n        error = response.error,\n        delay = response.delay,\n        newData = response.newData;\n\n    if (newData) {\n      response.result = newData();\n      this.mockedResponsesByKey[key].push(response);\n    }\n\n    if (!result && !error) {\n      throw new Error(\"Mocked response should contain either result or error: \" + key);\n    }\n\n    return new apollo_link_1.Observable(function (observer) {\n      var timer = setTimeout(function () {\n        if (error) {\n          observer.error(error);\n        } else {\n          if (result) {\n            observer.next(typeof result === 'function' ? result() : result);\n          }\n\n          observer.complete();\n        }\n      }, delay ? delay : 0);\n      return function () {\n        clearTimeout(timer);\n      };\n    });\n  };\n\n  return MockLink;\n}(apollo_link_1.ApolloLink);\n\nexports.MockLink = MockLink;\n\nvar MockSubscriptionLink = function (_super) {\n  tslib_1.__extends(MockSubscriptionLink, _super);\n\n  function MockSubscriptionLink() {\n    var _this = _super.call(this) || this;\n\n    _this.unsubscribers = [];\n    _this.setups = [];\n    return _this;\n  }\n\n  MockSubscriptionLink.prototype.request = function (_req) {\n    var _this = this;\n\n    return new apollo_link_1.Observable(function (observer) {\n      _this.setups.forEach(function (x) {\n        return x();\n      });\n\n      _this.observer = observer;\n      return function () {\n        _this.unsubscribers.forEach(function (x) {\n          return x();\n        });\n      };\n    });\n  };\n\n  MockSubscriptionLink.prototype.simulateResult = function (result, complete) {\n    var _this = this;\n\n    if (complete === void 0) {\n      complete = false;\n    }\n\n    setTimeout(function () {\n      var observer = _this.observer;\n      if (!observer) throw new Error('subscription torn down');\n      if (complete && observer.complete) observer.complete();\n      if (result.result && observer.next) observer.next(result.result);\n      if (result.error && observer.error) observer.error(result.error);\n    }, result.delay || 0);\n  };\n\n  MockSubscriptionLink.prototype.onSetup = function (listener) {\n    this.setups = this.setups.concat([listener]);\n  };\n\n  MockSubscriptionLink.prototype.onUnsubscribe = function (listener) {\n    this.unsubscribers = this.unsubscribers.concat([listener]);\n  };\n\n  return MockSubscriptionLink;\n}(apollo_link_1.ApolloLink);\n\nexports.MockSubscriptionLink = MockSubscriptionLink;\n\nfunction requestToKey(request, addTypename) {\n  var query = apollo_utilities_1.removeClientSetsFromDocument(request.query);\n  var queryString = query && printer_1.print(addTypename ? apollo_utilities_1.addTypenameToDocument(query) : query);\n  var requestKey = {\n    query: queryString\n  };\n  return JSON.stringify(requestKey);\n}\n\nfunction mockSingleLink() {\n  var mockedResponses = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    mockedResponses[_i] = arguments[_i];\n  }\n\n  var maybeTypename = mockedResponses[mockedResponses.length - 1];\n  var mocks = mockedResponses.slice(0, mockedResponses.length - 1);\n\n  if (typeof maybeTypename !== 'boolean') {\n    mocks = mockedResponses;\n    maybeTypename = true;\n  }\n\n  return new MockLink(mocks, maybeTypename);\n}\n\nexports.mockSingleLink = mockSingleLink;\n\nfunction mockObservableLink() {\n  return new MockSubscriptionLink();\n}\n\nexports.mockObservableLink = mockObservableLink;","map":null,"metadata":{},"sourceType":"script"}