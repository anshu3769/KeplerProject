{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = tslib_1.__importStar(require(\"react\"));\n\nvar apollo_client_1 = tslib_1.__importDefault(require(\"apollo-client\"));\n\nvar apollo_cache_inmemory_1 = require(\"apollo-cache-inmemory\");\n\nvar index_1 = require(\"./index\");\n\nvar test_links_1 = require(\"./test-links\");\n\ntslib_1.__exportStar(require(\"./test-links\"), exports);\n\nvar MockedProvider = function (_super) {\n  tslib_1.__extends(MockedProvider, _super);\n\n  function MockedProvider(props) {\n    var _this = _super.call(this, props) || this;\n\n    var _a = _this.props,\n        mocks = _a.mocks,\n        addTypename = _a.addTypename,\n        defaultOptions = _a.defaultOptions,\n        cache = _a.cache,\n        _b = _a.resolvers,\n        resolvers = _b === void 0 ? {} : _b;\n    var client = new apollo_client_1.default({\n      cache: cache || new apollo_cache_inmemory_1.InMemoryCache({\n        addTypename: addTypename\n      }),\n      defaultOptions: defaultOptions,\n      link: new test_links_1.MockLink(mocks || [], addTypename),\n      resolvers: resolvers\n    });\n    _this.state = {\n      client: client\n    };\n    return _this;\n  }\n\n  MockedProvider.prototype.render = function () {\n    return React.createElement(index_1.ApolloProvider, {\n      client: this.state.client\n    }, this.props.children);\n  };\n\n  MockedProvider.prototype.componentWillUnmount = function () {\n    this.state.client.stop();\n  };\n\n  MockedProvider.defaultProps = {\n    addTypename: true\n  };\n  return MockedProvider;\n}(React.Component);\n\nexports.MockedProvider = MockedProvider;","map":null,"metadata":{},"sourceType":"script"}